"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { useToast } from "@/components/ui/use-toast";
import { Brain, Lightbulb } from "lucide-react";

type Question = {
  id: string;
  text: string;
  options: string[];
  correctAnswer: string;
  explanation: string;
};

type QuizForm = {
  answers: { [key: string]: string };
};

interface AIGeneratedQuizProps {
  courseId: string;
  lessonId: string;
}

export default function AIGeneratedQuiz({
  courseId,
  lessonId,
}: AIGeneratedQuizProps) {
  const [quizId, setQuizId] = useState<string | null>(null);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { register, handleSubmit, reset } = useForm<QuizForm>();
  const { toast } = useToast();

  const generateQuiz = async () => {
    setIsLoading(true);
    try {
      const res = await fetch("/api/quiz/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ lessonId }),
      });
      if (!res.ok) {
        throw new Error(res.statusText);
      }
      const data = await res.json();
      setQuizId(data.quizId);
      setQuestions(data.questions);
      reset();
      toast({
        title: "Quiz Generated",
        description: "Your AI-generated quiz is ready!",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate quiz. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const onSubmit = async (data: QuizForm) => {
    if (!quizId) return;
    try {
      const res = await fetch("/api/quiz/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ quizId, answers: data.answers, courseId }),
      });
      if (!res.ok) {
        throw new Error(res.statusText);
      }
      const result = await res.json();
      toast({
        title: "Quiz Submitted",
        description: `Your score: ${result.score}%${
          result.passed ? " (Passed)" : ""
        }`,
      });
      reset();
      setQuizId(null);
      setQuestions([]);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to submit quiz.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">AI-Generated Quiz</h3>
        <Button onClick={generateQuiz} disabled={isLoading}>
          <Brain className="h-4 w-4 mr-2" />
          {isLoading ? "Generating..." : "Generate New Quiz"}
        </Button>
      </div>
      <div className="p-4 bg-primary/5 rounded-lg">
        <div className="flex items-center gap-3 mb-4">
          <Lightbulb className="h-5 w-5 text-primary" />
          <p className="text-sm">
            This quiz is generated by AI based on the content of this lesson.
          </p>
        </div>
      </div>
      {questions.length > 0 ? (
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {questions.map((question, index) => (
            <Card key={question.id}>
              <CardContent className="pt-6">
                <p className="font-medium mb-3">
                  {index + 1}. {question.text}
                </p>
                <RadioGroup className="space-y-2">
                  {question.options.map((option, i) => (
                    <div key={i} className="flex items-center gap-2">
                      <RadioGroupItem
                        value={option}
                        id={`${question.id}-${i}`}
                        {...register(`answers.${question.id}`)}
                      />
                      <Label htmlFor={`${question.id}-${i}`}>{option}</Label>
                    </div>
                  ))}
                </RadioGroup>
              </CardContent>
            </Card>
          ))}
          <Button type="submit" className="w-full">
            Submit Answers
          </Button>
        </form>
      ) : (
        <p className="text-muted-foreground">
          Click "Generate New Quiz" to start.
        </p>
      )}
    </div>
  );
}
