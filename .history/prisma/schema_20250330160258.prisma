generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  clerkId   String   @unique
  name      String?
  email     String   @unique
  image     String?
  bio       String?  @db.Text
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructorProfile InstructorProfile?
  studentProfile    StudentProfile?
  courses           Course[]           @relation("CourseInstructor")
  reviews           Review[]
  enrollments       Enrollment[]
  wishlist          Wishlist[]
  orders            Order[]
  messages          Message[]          @relation("MessageSender")
  receivedMessages  Message[]          @relation("MessageReceiver")
  notifications     Notification[]
  quizAttempts      QuizAttempt[]      @relation("UserQuizAttempts")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model InstructorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String?
  specialization String?
  biography      String?  @db.Text
  website        String?
  socialLinks    Json?
  featured       Boolean  @default(false)
  totalStudents  Int      @default(0)
  totalCourses   Int      @default(0)
  totalReviews   Int      @default(0)
  averageRating  Float    @default(0)
  totalRevenue   Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StudentProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests        String[]
  learningGoals    String?  @db.Text
  education        String?
  occupation       String?
  totalCourses     Int      @default(0)
  completedCourses Int      @default(0)
  totalSpent       Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Course {
  id                 String       @id @default(cuid())
  title              String
  slug               String       @unique
  description        String       @db.Text
  shortDescription   String?
  price              Float
  discountPrice      Float?
  thumbnail          String?
  previewVideo       String?
  level              CourseLevel  @default(BEGINNER)
  status             CourseStatus @default(DRAFT)
  featured           Boolean      @default(false)
  bestseller         Boolean      @default(false)
  published          Boolean      @default(false)
  publishedAt        DateTime?
  language           String       @default("English")
  subtitlesLanguages String[]
  duration           Int          @default(0)
  totalLessons       Int          @default(0)
  totalModules       Int          @default(0)
  requirements       String[]
  learningObjectives String[]
  targetAudience     String[]
  tags               String[]
  rating             Float?       // Added for coursesData.rating
  totalStudents      Int?         // Added for coursesData.students
  topCompanies       String[]     // Added for coursesData.topCompanies
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  instructorId  String
  instructor    User           @relation("CourseInstructor", fields: [instructorId], references: [id])
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id])
  modules       Module[]
  reviews       Review[]
  enrollments   Enrollment[]
  wishlist      Wishlist[]
  orderItems    OrderItem[]
  announcements Announcement[]
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum CourseStatus {
  DRAFT
  UNDER_REVIEW
  PUBLISHED
  ARCHIVED
  REJECTED
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  icon        String?
  image       String?
  featured    Boolean    @default(false)
  parentId    String?
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  courses     Course[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// Remaining models (Module, Lesson, etc.) remain unchanged...