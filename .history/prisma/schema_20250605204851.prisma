// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  clerkId   String   @unique
  name      String?
  email     String   @unique
  image     String?
  bio       String?  @db.Text
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructorProfile InstructorProfile?
  studentProfile    StudentProfile?
  courses           Course[]           @relation("CourseInstructor")
  reviews           Review[]
  enrollments       Enrollment[]
  wishlist          Wishlist[]
  orders            Order[]
  messages          Message[]          @relation("MessageSender")
  receivedMessages  Message[]          @relation("MessageReceiver")
  notifications     Notification[]
  quizAttempts      QuizAttempt[]      @relation("UserQuizAttempts")
  blogs             Blog[]             @relation("BlogAuthor")
  blogComments      BlogComment[]
  blogLikes         BlogLike[]
  Cart              Cart[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model InstructorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String?
  specialization String?
  biography      String?  @db.Text
  website        String?
  socialLinks    Json?
  featured       Boolean  @default(false)
  totalStudents  Int      @default(0)
  totalCourses   Int      @default(0)
  totalReviews   Int      @default(0)
  averageRating  Float    @default(0)
  totalRevenue   Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StudentProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests        String[]
  learningGoals    String?  @db.Text
  education        String?
  occupation       String?
  totalCourses     Int      @default(0)
  completedCourses Int      @default(0)
  totalSpent       Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Course {
  id                 String       @id @default(cuid())
  title              String
  slug               String       @unique
  description        String       @db.Text
  shortDescription   String?
  price              Float
  discountPrice      Float?
  thumbnail          String?
  previewVideo       String?
  level              CourseLevel  @default(BEGINNER)
  status             CourseStatus @default(DRAFT)
  featured           Boolean      @default(false)
  bestseller         Boolean      @default(false)
  published          Boolean      @default(false)
  publishedAt        DateTime?
  language           String       @default("English")
  subtitlesLanguages String[]
  certificateAvailable Boolean    @default(true)
  duration           Int          @default(0)
  totalLessons       Int          @default(0)
  totalModules       Int          @default(0)
  requirements       String[]
  learningObjectives String[]
  targetAudience     String[]
  tags               String[]
  rating             Float?
  totalStudents      Int?
  topCompanies       String[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  instructorId  String
  instructor    User           @relation("CourseInstructor", fields: [instructorId], references: [id])
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id])
  modules       Module[]
  reviews       Review[]
  enrollments   Enrollment[]
  wishlist      Wishlist[]
  orderItems    OrderItem[]
  announcements Announcement[]
  Cart          Cart[]
  Message       Message[]
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum CourseStatus {
  DRAFT
  UNDER_REVIEW
  PUBLISHED
  ARCHIVED
  REJECTED
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  icon        String?
  image       String?
  featured    Boolean    @default(false)
  parentId    String?
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  courses     Course[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  position    Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String?    @db.Text
  type        LessonType
  videoUrl    String?
  duration    Int        @default(0)
  position    Int
  isPreview   Boolean    @default(false)
  moduleId    String
  module      Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  resources   Resource[]
  progress    Progress[]
  quizzes     Quiz[]
  notes       Note[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  ASSIGNMENT
  LIVE_SESSION
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String
  url         String
  size        Int?
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  passingScore Int           @default(70)
  timeLimit    Int?
  lessonId     String
  lesson       Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Question {
  id            String       @id @default(cuid())
  text          String
  type          QuestionType
  options       Json?
  correctAnswer String?
  explanation   String?
  points        Int          @default(1)
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       Answer[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  TEXT
  MATCHING
}

model QuizAttempt {
  id          String    @id @default(cuid())
  score       Float
  passed      Boolean
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  userId      String
  user        User      @relation("UserQuizAttempts", fields: [userId], references: [id])
  answers     Answer[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([quizId, userId, startedAt])
}

model Answer {
  id            String      @id @default(cuid())
  answer        String
  isCorrect     Boolean
  questionId    String
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizAttemptId String
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Enrollment {
  id           String           @id @default(cuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  courseId     String
  course       Course           @relation(fields: [courseId], references: [id])
  status       EnrollmentStatus @default(ACTIVE)
  completedAt  DateTime?
  expiresAt    DateTime?
  progress     Progress[]
  certificates Certificate[]
  notes        Note[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  REFUNDED
}

model Progress {
  id             String     @id @default(cuid())
  enrollmentId   String
  enrollment     Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lessonId       String
  lesson         Lesson     @relation(fields: [lessonId], references: [id])
  completed      Boolean    @default(false)
  completedAt    DateTime?
  watchedSeconds Int        @default(0)
  lastPosition   Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([enrollmentId, lessonId])
}

model Note {
  id           String     @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content      String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([enrollmentId, lessonId])
}

model Certificate {
  id           String     @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  url          String
  issueDate    DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  helpful   Int      @default(0)
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  addedAt   DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Order {
  id             String      @id @default(cuid())
  orderNumber    String      @unique
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  status         OrderStatus @default(PENDING)
  total          Float
  discount       Float       @default(0)
  tax            Float       @default(0)
  currency       String      @default("USD")
  paymentMethod  String?
  paymentId      String?
  items          OrderItem[]
  couponId       String?
  coupon         Coupon?     @relation(fields: [couponId], references: [id])
  billingAddress Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id                String       @id @default(cuid())
  code              String       @unique
  description       String?
  discountType      DiscountType
  discountValue     Float
  maxUses           Int?
  usedCount         Int          @default(0)
  minOrderValue     Float?
  maxDiscountAmount Float?
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean      @default(true)
  orders            Order[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String    @id @default(cuid())
  content    String    @db.Text
  senderId   String
  sender     User      @relation("MessageSender", fields: [senderId], references: [id])
  receiverId String?
  receiver   User?     @relation("MessageReceiver", fields: [receiverId], references: [id])
  courseSlug String?
  course     Course?   @relation(fields: [courseSlug], references: [slug])
  likes      Int       @default(0)
  read       Boolean   @default(false)
  readAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([courseSlug])
  @@index([createdAt])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  link      String?
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Blog {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String        @db.Text
  excerpt     String?       @db.Text
  thumbnail   String?
  status      BlogStatus    @default(DRAFT)
  publishedAt DateTime?
  authorId    String
  author      User          @relation("BlogAuthor", fields: [authorId], references: [id])
  tags        String[]
  comments    BlogComment[]
  likes       BlogLike[]
  totalViews  Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model BlogComment {
  id          String        @id @default(cuid())
  content     String        @db.Text
  blogId      String
  blog        Blog          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  parentId    String?
  parent      BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     BlogComment[] @relation("CommentReplies")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model BlogLike {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([blogId, userId])
}